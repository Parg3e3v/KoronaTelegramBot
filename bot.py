from covid import Covid # 2.1.6
import telebot
from telebot import types
import country_converter as coco
import flag


covid19 = Covid(source="worldometers")
bot = telebot.TeleBot('1244740181:AAGGMJ2_Mwa_MmVAFi3stofmF5cVJw1_qtY')

@bot.message_handler(commands=['start'])
def start(message):
    # Globals
    global IsChanging
    global notific
    global country
    global nowConfirmend
    global nowDeaths
    global id
    IsChanging = False
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–í–æ –≤—Å—ë–º –º–∏—Ä–µ')
    btn2 = types.KeyboardButton('Armenia')
    btn3 = types.KeyboardButton('Russia')
    btn4 = types.KeyboardButton('Japan')
    btn5 = types.KeyboardButton('Georgia')
    btn6 = types.KeyboardButton('USA')
    global buttons
    buttons = [btn1, btn2, btn3, btn4, btn5, btn6]
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    send_msg = f'<b>–ü—Ä–∏–≤–µ—ÇüôÇ <em>{message.from_user.first_name} </em>!</b>\n<b>–Ø - <em>–ö–æ—Ä–æ–Ω–∞ –ë–æ—Ç</em>, –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –∫–∞—Ä–æ–Ω–∞–≤–∏—Ä—É—Åü¶†</b>\n' \
               f' <b>–ù–∞–∂–º–∏ –Ω–∞ –ª—é–±—É—é –∏–∑ <em>–∫–Ω–æ–ø–æ–∫</em>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <em>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é </em>–ø—Ä–æ –∫–∞—Ä–æ–Ω–∞–≤–∏—Ä—É—Åüëá</b>\n<b> </b>\n<b>–ï—Å–ª–∏ —Ç—ã –Ω–µ –Ω–∞—à—ë–ª –∏–º—è —Ç–æ–π —Å—Ç—Ä–∞–Ω—ã, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–µ–ª, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ—ë!' \
               f'<em>(–¢–æ–ª—å–∫–æ –ø–æ –ê–Ω–≥–ª–∏–π—Å–∫–∏!)</em></b>\n<b></b>\n'\
               f'<b>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É\n/help üôÇ</b>'
    sti = open('stickers/AnimatedSticker.tgs', 'rb')
    bot.send_sticker(message.chat.id, sti)
    bot.send_message(message.chat.id, send_msg, parse_mode='html', reply_markup=markup)

@bot.message_handler(commands=['help'])
def help(message):
    msg = f"<b>Help</b>‚ù§Ô∏è\n<b></b>\n"\
          f"/changebutton - <b>–ü–æ–º–µ–Ω—è—Ç—å –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –Ω–æ–≤—É—éüòê</b>\n" \
          f"/list - <b>–ò–º–µ–Ω–∞ –≤—Å–µ—Ö <u>—Å—Ç—Ä–∞–Ω</u> –∏ <u>–º–µ—Å–Ω–æ—Å—Ç–µ–π</u>, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ—Çü¶†</b>\n" \
          f"/help - <b>–ü–æ–º–æ—â—å</b>‚úÖ\n<b></b>\n"\
          f"<b>–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Ä <em>—Å—Ç–∞–Ω—É</em>, –∏–º—è –∫–æ—Ç–æ—Ä–æ–π –Ω–µ –≤–∏–¥–∏—à—å –Ω–∏–∂–µüëá, —Ç–æ –ø—Ä–æ—Å—Ç–æ <em>–æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ—ë!</em>üìù</b>"
    stick = open('stickers/wanted.tgs', 'rb')
    bot.send_message(message.chat.id, msg, parse_mode='html')
    bot.send_sticker(message.chat.id, stick)

@bot.message_handler(commands=['changebutton'])
def changebutton(message):
    msg = f"<b>–•–æ—Ä–æ—à–æüòä.</b>\n<b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–æ–∫—É—é –∫–Ω–æ–ø–∫—É —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –Ω–æ–≤—É—éüëá</b>"
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("1", callback_data=1)
    item2 = types.InlineKeyboardButton("2", callback_data=2)
    item3 = types.InlineKeyboardButton("3", callback_data=3)
    item4 = types.InlineKeyboardButton("4", callback_data=4)
    item5 = types.InlineKeyboardButton("5", callback_data=5)
    item6 = types.InlineKeyboardButton("6", callback_data=6)
    item7 = types.InlineKeyboardButton("–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="reset")

    markup.add(item1, item2, item3, item4, item5, item6, item7)

    bot.send_message(message.chat.id, msg, reply_markup=markup, parse_mode='html')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global IsChanging


    # –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è ^_^
    # bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
    #                           text="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!!!")


    global buttons
    try:
        if call.message:
            if call.data == "reset":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"<b>–•–æ—Ä–æ—à–æüòä.</b>\n<b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–æ–∫—É—é –∫–Ω–æ–ø–∫—É —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –Ω–æ–≤—É—éüëá</b>",
                                      reply_markup=None, parse_mode='html')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                btn1 = types.KeyboardButton('–í–æ –≤—Å—ë–º –º–∏—Ä–µ')
                btn2 = types.KeyboardButton('Armenia')
                btn3 = types.KeyboardButton('Russia')
                btn4 = types.KeyboardButton('Japan')
                btn5 = types.KeyboardButton('Georgia')
                btn6 = types.KeyboardButton('US')
                markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
                msg = f"<b>–î–∞–Ω–Ω—ã–µ –û–±–Ω–∞–≤–ª–µ–Ω—ãüëç</b>"
                sticker = open("stickers/good.tgs", "rb")
                bot.send_message(call.message.chat.id, msg, reply_markup=markup, parse_mode='html')
                bot.send_sticker(call.message.chat.id, sticker)

            else:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= f"<b>–•–æ—Ä–æ—à–æüòä.</b>\n<b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–æ–∫—É—é –∫–Ω–æ–ø–∫—É —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –Ω–æ–≤—É—éüëá</b>",
                                      reply_markup=None, parse_mode='html')
                global data
                data = call.data
                txt = f"<b>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è —Å—Ç—Ä–∞–Ω—ã, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç ‚ò∫Ô∏è</b>"

                IsChanging = True
                bot.send_message(call.message.chat.id, txt, parse_mode='html')



    except Exception as e:
        print(repr(e))

@bot.message_handler(commands=['news'])
def notif(message):
    # global notific
    # notific = True
    # mes = f"<b>–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∏–º—è —Å—Ç—Ä–∞–Ω—ã<em>(–Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º)</em>, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å</b>"
    # bot.send_message(message.chat.id, mes, parse_mode='html')
    bot.send_message(message.chat.id, f"<u>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!!</u>", parse_mode='html')


@bot.message_handler(commands=['list'])
def list(message):
    msg = f""
    all = covid19.list_countries()
    for i in all:
        if i == 'north america':
            bot.send_message(message.chat.id, f"<b>–ó–∞–≥—Ä—É–∑–∫–∞üôÇ...</b>", parse_mode='html')
            st = open("stickers/working.tgs", "rb")
            bot.send_sticker(message.chat.id,st)
        if i == 'world':
            # bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=f"<b>–ó–∞–≥—Ä—É–∑–∫–∞üôÇ!!!!...</b>", parse_mode='html')
            continue
        try:
            name = coco.convert(names=i, to='ISO2')
            fl = flag.flag(name)
        except ValueError:
            try:
                fl = flag.flag(i)
                # if fl == "üè¥":
                #     fl = "üèÅ"
            except Warning:
                fl = "üè¥"
            except ValueError:
                fl = "üè¥"


        msg += f"<b>{i}</b> {fl},\n"
    bot.send_message(message.chat.id, msg, parse_mode='html')

@bot.message_handler(content_types=['text'])
def mess(message):
    global buttons
    global data
    global IsChanging
    global notific
    final_message = ""
    get_mess = message.text
    if IsChanging == False:
        if get_mess == "–í–æ –≤—Å—ë–º –º–∏—Ä–µ":
            deaths = covid19.get_total_deaths()
            confirmed = covid19.get_total_confirmed_cases()
            recovered = covid19.get_total_recovered()
            final_message = f"<b><em>–î–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É üè≥Ô∏è:</em></b>\n" \
                            f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:\n</b>" \
                            f"<b>–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{confirmed}\n<b>–°–º–µ—Ç—Ä–µ–π: </b> {deaths}\n<b>–ò—Å—Ü–µ–ª—ë–Ω–Ω—ã—Ö: </b>{recovered}"
        else:
            try:
                location = covid19.get_status_by_country_name(get_mess)
            except ValueError:
                    final_message = "–Ø –Ω–µ—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª"
                    st = open("stickers/what.tgs", "rb")
                    bot.send_sticker(message.chat.id, st)

        if final_message == "":
            name = coco.convert(names=location['country'], to='ISO2')
            fl = flag.flag(name)
            final_message = f"<b><em>{location['country']} </em> {fl} :</b>\n"\
                            f"<u>–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ:</u>\n" \
                            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:\n<b>" \
                            f"–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location['confirmed']:,}\n<b>–ù–æ–≤—ã—Ö –∑–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location['new_cases']}\n<b>–°–º–µ—Ç—Ä–µ–π: </b> {location['deaths']:,}\n<b>–ò—Å—Ü–µ–ª—ë–Ω–Ω—ã—Ö: </b>{location['recovered']}"

        bot.send_message(message.chat.id, final_message, parse_mode='html')

    # elif notific == True:
    #     if get_mess == "–í–æ –≤—Å—ë–º –º–∏—Ä–µ":
    #         pass
    #     else:
    #         try:
    #             location = covid19.get_status_by_country_name(get_mess)
    #         except ValueError:
    #             final_message = "–û—à–∏–±–∫–∞‚ùå"
    #             st = open("stickers/end.tgs", "rb")
    #             bot.send_sticker(message.chat.id, st)
    #             bot.send_message(message.chat.id, final_message, parse_mode='html')
    #
    #     if final_message == "":
    #         ms = f"–û—Ç–ª–∏—á–Ω–æ. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!"
    #         bot.send_message(message.chat.id, ms, parse_mode='html')
    #         global country
    #         global nowConfirmend
    #         global nowDeaths
    #         global id
    #         id = message.chat.id
    #         nowDeaths = location['deaths']
    #         nowConfirmend = location['confirmed']
    #         country = get_mess
    #     notific = False

    else:
        if get_mess == "–í–æ –≤—Å—ë–º –º–∏—Ä–µ":
            buttons[int(data) - 1].text = get_mess
            final_message = "–í–æ –≤—Å—ë–º –º–∏—Ä–µ"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(buttons[0], buttons[1], buttons[2], buttons[3], buttons[4], buttons[5])
            msg = f"<b>–î–∞–Ω–Ω—ã–µ –û–±–Ω–∞–≤–ª–µ–Ω—ãüëç</b>"
            sticker = open("stickers/good.tgs", "rb")
            bot.send_message(message.chat.id, msg, reply_markup=markup, parse_mode='html')
            bot.send_sticker(message.chat.id, sticker)
            IsChanging = False
        else:
            try:
                location = covid19.get_status_by_country_name(get_mess)
            except ValueError:
                final_message = "–û—à–∏–±–∫–∞‚ùå"
                st = open("stickers/end.tgs", "rb")
                bot.send_sticker(message.chat.id, st)
                bot.send_message(message.chat.id, final_message, parse_mode='html')
        if final_message == "":
            buttons[int(data) - 1].text = get_mess
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(buttons[0],buttons[1],buttons[2],buttons[3],buttons[4],buttons[5])
            msg = f"<b>–î–∞–Ω–Ω—ã–µ –û–±–Ω–∞–≤–ª–µ–Ω—ãüëç</b>"
            sticker = open("stickers/good.tgs", "rb")
            bot.send_message(message.chat.id, msg, reply_markup=markup, parse_mode='html')
            bot.send_sticker(message.chat.id,sticker)
            IsChanging = False


@bot.message_handler(content_types=['audio', 'video', 'document', 'location', 'contact', 'sticker', 'photo'])
def mess(message):
    final_message = "–û—à–∏–±–∫–∞‚ùå"
    st = open("stickers/end.tgs", "rb")
    bot.send_sticker(message.chat.id, st)
    bot.send_message(message.chat.id, final_message, parse_mode='html')

bot.polling(none_stop = True)



# while True:
#     global country
#     global nowConfirmend
#     global nowDeaths
#     global id
#
#     try:
#         location = covid19.get_status_by_country_name(country)
#         if location['confirmed'] > nowConfirmend:
#             ms = f"<b>–í {country} —á–∏—Å–ª–æ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ <u>{location['confirmed'] - nowConfirmend}</u> !</b>"
#             bot.send_message(id, ms, parse_mode='html')
#             st2 = open("stickers/news.tgs", "rb")
#             bot.send_sticker(id, st2)
#             nowConfirmend = location['confirmed']
#
#         if location['deaths'] > nowDeaths:
#             ms = f"<b>–í {country} —á–∏—Å–ª–æ —É–º–µ—Ä—à–∏—Ö –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ <u>{location['deaths'] - nowDeaths}</u> !</b>"
#             bot.send_message(id, ms, parse_mode='html')
#             st2 = open("stickers/news.tgs", "rb")
#             bot.send_sticker(id, st2)
#             nowDeaths = location['deaths']
#         else:
#             pass
#     except NameError:
#         continue
